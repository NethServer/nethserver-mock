#!/usr/bin/python3

#
# Copyright (C) 2016 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import sys
import json
import requests
import re
import os

redmine_refs = {}
github_refs = {}

github_match = re.compile(r'\b([^/\s]+)/([^#\s]+)#(\d+)', re.IGNORECASE)
redmine_match = re.compile(r'\bRefs\s+#(\d+)', re.IGNORECASE)

for line in sys.stdin:
    redmine_refs.update(dict.fromkeys(re.findall(redmine_match, line)))
    github_refs.update(dict.fromkeys(re.findall(github_match, line)))

for issue_id in redmine_refs.keys():
    try:
        url = 'http://dev.nethserver.org/issues/%s.json' % issue_id
        response = requests.get(url, headers={'User-Agent': None})
        if not response.ok:
            raise RuntimeError("%s: %s: " % (response.status_code, response.text))
        issue = response.json()['issue']
        print("- %s - %s #%s [%s]%s" % ( \
            issue["subject"], \
            issue["tracker"]["name"], \
            issue["id"], \
            issue["project"]["name"], \
            "" if issue["status"]["name"] in ["CLOSED", "VERIFIED"] \
                else " !!%s" % issue["status"]["name"] \
        ))
    except Exception as e:
        sys.stderr.write("[ERROR] %s\n" % str(e))

try:
    if github_refs:
        with open(os.path.expanduser('~/.release_tag_token')) as tokenf:
            token = tokenf.readline().rstrip()
            github_headers = {'Authorization': 'token %s' % token}
except IOError as e:
    sys.stderr.write("[ERROR] Failed to read the GitHub API token (%s)\n" % str(e))
    github_headers = {}

for issue_org, issue_repo, issue_id in github_refs:
    try:
        url = 'https://api.github.com/repos/%s/%s/issues/%s' % (issue_org, issue_repo, issue_id)
        response = requests.get(url, headers=github_headers)
        if not response.ok:
            raise RuntimeError("%s: %s: " % (response.status_code, response.text))
        issue = response.json()
        print("- %s - %s%s/%s#%s%s" % ( \
            issue['title'], \
            "Bug " if list(filter(lambda l: l["name"] == "bug", issue["labels"])) else "", \
            issue_org,
            issue_repo,
            issue['number'], \
            "" if list(filter(lambda l: l["name"] == "verified", issue["labels"])) \
               else " !! INCOMPLETE" \
        ))
    except Exception as e:
        sys.stderr.write("[ERROR] %s\n" % str(e))
